#!/usr/bin/perl

use Parser;
use Evaluator;
use Term::ReadLine;
use Getopt::Long;
use Pod::Usage;

our $VERSION = "0.0.1";

our $help = 0;
our $prompt = "mcalc>";
our $silent=0;
our $verbose = 0;
our $version = 0;

# Hier geht es los!
our $term;
our $evaluator = Evaluator->new();

sub printWelcome {
  print "Welcome to mcalc v$VERSION\n"
}

sub printVersion {
  print "mcalc v$VERSION by Marc Hauptmann\n";

  exit;
}

sub printHelp {
  pod2usage( -verbose => 1 );

  exit;
}

sub batch {
  calculate($_[0]);

  exit;
}

sub calculate {
  my $input = $_[0];

  eval {
    # parsen
    my $parser = Parser->new();
    my $tree = $parser->parse($input);

    # auswerten
    my $result = $evaluator->evaluate(\$tree);

    printf "$result\n";
  };
  if (my $error = $@) {
    print $error;
  }
}

sub complete {
  my ($text, $line, $start) = @_;
  my $attribs = $term->Attribs;

  $attribs->{completion_suppress_append} = 1;

  @completions = $evaluator->getCompletions($line);

  foreach $val ("quit", "exit", "bye") {
    if($val =~ /^$line/) {
      push @completions, $val;
    }
  }

  return @completions;
}

GetOptions(
	   "help" => sub { printHelp() },
	   "prompt|p=s" => \$prompt,
	   "silent|s" => \$silent,
	   "version" => sub { printVersion() },
	   "<>" => \&batch
);

if (!$silent) {
  printWelcome();
}

$term = Term::ReadLine->new("mcalc");
my $attribs = $term->Attribs;

$attribs->{completion_function} = \&complete;
$attribs->{completer_word_break_characters} = "+-*/^()";

while (1) {
  my $input = $term->readline("$prompt ");

  # Leerzeichen entfernen
  $input =~ s/\s//g;

  # Sonderbehandlung f√ºr 'quit'
  if ($input =~ /^(quit|bye|exit)$/) {
    if (!$silent) {
      print "bye :)\n";
    }

    exit;
  }

  calculate($input);
}


__END__

=pod

=encoding utf-8

=head1 NAME

mcalc - a simple calculcator for the terminal

=head1 SYNOPSIS

B<mcalc> [I<OPTIONS>] [EXPRESSION]

=head1 DESCRIPTION

B<mcalc> is a simple calculator for the terminal. By default it presents a prompt for evaluating mathematical expressions. See L</"EXPRESSIONS"> for further information about the syntax.

If I<EXPRESSION> is submitted, the result is directly printed to the standard output and B<mcalc> terminates. This is useful for performing calculations in shell scripts.

=head1 OPTIONS

=over 8

=item B<--help>

Print help and exit

=item B<-p> I<STRING>, B<--prompt> I<STRING>

Uses I<STRING> as command promt. The standard prompt is I<mcalcE<gt>>.

=item B<-s>, B<--silent>

Does not print messages at start or exit.

=item B<--version>

Prints the version number of B<mcalc> and exits.

=back

=cut

=head1 EXPRESSIONS

=head2 Simple calculations

B<mcalc> can perform simple calculations using the following operators: I<+>, I<->, I<*>, I</> and I<^>. Their behaviour should be clear. Further braces can be used to change the order of evaluations.

=head2 Functions

More complex calculations require the use of functions. B<mcalc> can evaluate common mathematical functions.

=head3 Basic Functions

=over 8

=item B<abs>(x)

returns the absolute of C<x>. This is C<x> if C<x> is positive, or C<-x> otherwise.

=item B<ceil>(x)

returns the smallest integer greater than C<x>

=item B<floor>(x)

returns the biggest integer smaller than C<x>

=item B<round>(x)

returns C<floor(x + 0.5)>

=item B<sqrt>(x)

computes the positive square root of C<x>

=back

=head3 Trigonometric Functions

This section describes the trigonimetric functions available in B<mcalc>. All those functions expect their parameters as radians.

=over 8

=item B<cos>(x)

computes the cosine of a real number C<x>

=item B<cot>(x)

comutes the cotangent of a real number C<x>

=item B<sin>(x)

computes the sine of a real number C<x>

=item B<tan>(x)

computes the tangent of a real number C<x>

=back

=head3 Logarithms

=over 8

=item B<ln>(x)

computes the natural logarithm of a real number C<x>

=item B<logn>(x, n)

computes the logarithm to the base C<n> of a real number C<x>; same as C<ln(x)/ln(n)>

=back

=head3 Other functions

=over 8

=item B<sum>(expr, var, from, to)

This function calculates a sum expression. C<var> takes the values from the expression C<from> to C<to>.

=back

=head2 Special commands

=over 8

=item I<bye>, I<exit>, I<quit>, 

Exits the program

=back

=head2 Assignments

You can assign values to variables by using the assignment operator C<=>. For example you can use 
    
    alpha = pi/2

to declare the new variable C<alpha>. After that you can use the following expression

    sin(alpha)

which will evaulate to 1 (well, nearly).

=head1 SYNTAX

=over 4

I<statement>    := [ I<identifier> = ] I<expression>

I<expression>   := [ - ] I<term> [ I<operator> I<term> ] ...

I<term>         := I<number> | ( I<expression> ) | I<identifier> [ ( I<args> ) ]

I<args>         := I<expression> [ , I<expression> ] ...

I<identifier>   := regex([a-zA-Z]+)

I<number>       := regex(\d+\.?\d*)

I<operator>     := + | - | * | / | ^

=back

=head1 EXAMPLES

You can use B<mcalc> to calculate the answer to life, the universe and everything else:

    mcalc> 2^2*(7+3)+2
    42

Some trigonometry stuff with a variable:

    mcalc> alpha=pi/5
    alpha = 0.6238
    mcalc> sin(alpha)^2+cos(alpha)^2
    1

Calculating a phytagorean triple using B<mcalc>'s batch mode:

    $> mcalc "sqrt(3^2+4^2)"
    5

=head1 AUTHOR

Marc Hauptmann <marc.hauptmann@stud.uni-hannover.de>

=cut
